МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ  УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


Кафедра «Програмної інженерії»


ЗВІТ
з лабораторної роботи №3
з дисципліни «Аналіз та рефакторинг коду»
на тему: «Розробка бізнес-логіки та функцій адміністрування серверної частини програмної системи»




Виконала                    Перевірив
ст. гр. ПЗПІ-22-6           ст. викладач
Лисенко А.М.                Сокорчук І.П.







Харків 2024
1 РОЗРОБКА БІЗНЕС-ЛОГІКИ ТА ФУНКЦІЙ АДМІНІСТРУВАННЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ
2. Мета роботи:
Розробити бізнес-логіку та функції адміністрування серверної частини  програмної системи.
3. Хід роботи:
3.1 Розробити бізнес логіку серверної частини програмної системи.
Бізнес-логіка розрахунку порогових показників для формування екстрених сповіщень.
Визначення порогових значень:
    1. Рівень газу: рівень газу вимірюється в ppm. Поріг для небезпечних концентрацій газу залежить від виду газу. Для метану (CH₄): поріг вибухонебезпечної концентрації   5% об'єму повітря (50,000 ppm).
    2. Температура: температурний поріг для житлових приміщень (стандарт) 30°C та вище.
    3. Тиск: вимірюється в барах. Поріг для тиску для газових системи Т 10 бар.
Математична логіка та розрахунок:
Потрібно розрахувати загальний рівень небезпеки, з урахуванням даних всіх показників.
Формула для визначення рівня небезпеки:
    dangerLevel = (gasLevel/maxGasLevel) + ((temperature )/maxTemperature ) + ((pressure )/maxPressure )
Поріг небезпеки: якщо сума перевищує 1 (це означає, що хоча б одне з значень наближається до свого максимального порогу).
Бізнес-логіка розрахунку строку використання датчику та їх потенційного оновлення або проведення додаткових перевірок.
Алгоритм визначення строку:
    1. Вік датчика (T): визначається як різниця між поточною датою та датою встановлення сенсора.
    2. Рекомендований термін служби датчика (L): визначає, скільки часу сенсор може працювати до необхідності перевірки або заміни.
    3. Частота перевірок (P): частота, з якою було проведено перевірки датчика (визначаємо з загальної кількості перевірок сенсору).
Бізнес-логіка розрахунку кількості сенсорів у локації певної площі: ця логіка дозволяє автоматично визначити мінімальну необхідну кількість сенсорів для забезпечення безпеки залежно від площі та інших характеристик локації.
Основні фактори для розрахунку:
    1. Площа локації (S): вимірюється у квадратних метрах (м²).
    2. Рекомендована щільність сенсорів (D): кількість сенсорів на певну площу.
    3. Тип локації: від типу залежить рівень ризику та щільність сенсорів.
    4. Особливості локації: наявність зон з підвищеним ризиком.
    5. Регламентовані вимоги: норми безпеки, які вказують мінімальну кількість сенсорів.
Алгоритм розрахунку:
    1. Отримати параметри локації: площа (S), тип локації.
    2. Визначити базову щільність сенсорів (D) на основі вказаного типу локації.
    3. Розрахувати базову кількість сенсорів: N_base=⌈S/D⌉
    4. Врахувати регламентовані вимоги: гарантування, що отримана кількість сенсорів відповідає нормам безпеки.
Бізнес-логіка для відправки сповіщень щодо виявлених аномалій (витоків газу, пошкодження газових мереж та інше). При отриманні даних з сенсорів, система додає додаткову перевірку на перевищення порогових показників (ці показники визначено у бізнес-логіці розрахунку порогових показників для формування екстрених сповіщень). Якщо аномалію було зафіксовано, відбувається надсилання електронного листа адміністраторам системи, завідувачам комплексу та мешканцям з сформованим листом-попередженням.
Бізнес-логіка для відправки сповіщень щодо несправностей сенсорів, що були виявленні при проведенні перевірок. При додаванні інформації про нові перевірки сенсорів вводиться перевірка результату. Якщо сенсор не проходить перевірку (result = Failed) надсилається електронний лист на пошту завідувачів комплексу з сформованим інформаційним листом.
3.2 Розробити функції адміністрування серверної частини програмної системи.
У системі передбачено декілька рівнів адміністрування, з визначенням ролей користувачів: адміністратори, завідувачі, мешканці комплексу. Всі вони мають різні рівні доступу, кожен з яких надає певний функціонал (може бути повним, обмеженим) для взаємодії з програмною системою.
Адміністратор системи відповідає за загальну роботу системи. Він має повні права для використання розроблених функцій. Виключеннями є функції, пов’язані з бізнес-логікою та деякі додаткові функції взаємодії. 
Адміністратор бізнес-логіки системи може взаємодіяти у повній мірі з сенсорами, перевірками сенсорів, даними, що отримуються зі встановлених сенсорів. Цей користувач має доступ до функцій, що стосуються бізнес-логіки розрахунку кількості сенсорів у локації певної площі та бізнес-логіки розрахунку строку використання датчику, їх потенційного оновлення або проведення додаткових перевірок. Ним задаються параметри для проведення обчислень та аналізу даних. 
Завідувач житлового комплексу – відповідальна людина, що має доступ до додавання, оновлення, видалення та загального перегляду мешканців будинку. Завідувач (або менеджер) також може переглядати історію подій, займатися моніторингом системи. Він отримує сповіщення щодо виявлених аномальних та потенційно небезпечних подій (витоків газу), несправностей сенсорів.
Мешканець житлового комплексу це звичайний користувач, що має мінімальний доступ до системи. До доступних функцій відносяться: перегляд встановлених сенсорів для виявлення витоків газу (в усіх локаціях комплексу), отримання та перегляд сповіщень, перегляд історії подій.
3.3 Створити програмну реалізацію бізнес-логіки та функцій адміністрування серверної частини.
Фрагменти коду, що містять математичні формули для реалізації бізнес-логіки для відправки сповіщень щодо виявлених аномалій, наведено у додатку А.
У додатку Б представлено приклад адміністрування серверної частини, а саме методи API для управління користувачами в системі.
3.4 Перевірити роботу серверної частини системи.
Тестування серверної частини системи відбувалася за допомогою Swagger. Цей інструмент автоматично генерує інтерфейс для тестування API.
4. Створені UML діаграми наведено у додатку В.
5. Посилання на відеозапис з тестуванням функціональності серверної частини (YouTube):
https://youtu.be/_sZQ2TPTVYU 
6. Посилання на репозиторій проєкту (GitHub):
https://github.com/NureLysenkoAnna/arkpz-pzpi-22-6-lysenko-anna/tree/main/Task3
7. Висновки:
У результаті виконання лабораторної роботи було розроблено та програмно реалізовано бізнес-логіку та функції адміністрування серверної частини  програмної системи.

ДОДАТОК А
Фрагмент програмного коду з реалізацією бізнес-логіки
     
1	public async Task MonitorNewSensorDataAsync(SensorData sensorData)
2	{
3	    double dangerLevel = CalculateDangerLevel(sensorData.gas_level, 
4	        sensorData.temperature, sensorData.pressure);
5	
6	    if (dangerLevel > 10)
7	    {
8	       var eventSeverity = dangerLevel > 2 ? "High" : "Medium";
9	       var eventTime = DateTime.Now;
10	
11	       var newEvent = new Event
12	       {
13	            data_id = sensorData.data_id,
14	            event_time = eventTime,
15	            severity = SeverityLevel.High
16	       };
17	
18	       _context.Events.Add(newEvent);
19	       await _context.SaveChangesAsync();
20	
21	       await SendNotificationToAdminAsync(newEvent, eventSeverity);
22	    }
23	}
24
25	private double CalculateDangerLevel(double gasLevel, double temperature, double pressure)
26	{
27	    double maxGasLevel = 50000;
28	    double maxTemperature = 30;
29	    double maxPressure = 10;
30
31	    return (gasLevel / maxGasLevel) + (temperature / maxTemperature) + (pressure / maxPressure);
32	}

ДОДАТОК Б
Фрагменти програмного коду з реалізацією адміністрування серверної частини

1	[ApiController]
2	[Route("api/users")]
3	public class UserController : ControllerBase
4	{
5	    private readonly UserService _userService;
6	
7	    public UserController(UserService userService)
8	    {
9	        _userService = userService;
10	    }
11	
12	    [HttpGet]
13	    [Authorize(Roles = "Admin, Manager")]
14	    [SwaggerOperation(Summary = "Отримати список всіх користувачів.")]
15	    public async Task<ActionResult<IEnumerable<User>>> GetUsers()
16	    {
17	        var users = await _userService.GetAllUsersAsync();
18	        return Ok(users);
19	    }
20	
21	    [HttpPost]
22	    [Authorize(Roles = "Admin, Manager")]
23	    [SwaggerOperation(Summary = "Створити нового користувача.")]
24	    public async Task<ActionResult<User>> CreateUser([FromBody] User user)
25	    {
26	        try
27	        {
28	            var createdUser = await _userService.CreateUserAsync(user);
29	            return CreatedAtAction(nameof(GetUsers), new { id = createdUser.user_id }, createdUser);
30	        }
31	        catch (System.Exception ex)
32	        {
33	            return BadRequest(ex.Message);
34	        }
35	    }
36	
37	    [HttpPut("{id}")]
38	    [Authorize(Roles = "Admin, Manager")]
39	    [SwaggerOperation(Summary = "Оновити обраного користувача.")]
40	    public async Task<IActionResult> UpdateUser(int id, [FromBody] User user)
41	    {
42	        try
43	        {
44	            await _userService.UpdateUserAsync(id, user);
45	            return Ok("Користувача оновлено успішно.");
46	        }
47	        catch (System.Exception ex)
48	        {
49	            return NotFound(ex.Message);
50	        }
51	    }
52	
53	    [HttpDelete("{id}")]
54	    [Authorize(Roles = "Admin, Manager")]
55	    [SwaggerOperation(Summary = "Видалити обраного користувача.")]
56	    public async Task<IActionResult> DeleteUser(int id)
57	    {
58	        try
59	        {
60	            await _userService.DeleteUserAsync(id);
61	            return Ok("Користувача видалено.");
62	        }
63	        catch (System.Exception ex)
64	        {
65	            return NotFound(ex.Message);
66	        }
67	    }
68  }

ДОДАТОК В
UML діаграми

Рисунок В.1 – UML діаграма діяльності для бізнес-логіки відправки сповіщень щодо виявлених аномалій

Рисунок В.2 – UML діаграма діяльності для бізнес-логіки розрахунку кількості сенсорів у локації певної площі

Рисунок В.3 – UML діаграма діяльності для бізнес-логіки сповіщення щодо несправностей сенсорів

Рисунок В.4 – UML діаграма діяльності для бізнес-логіки розрахунку строку використання сенсора

Рисунок В.5 – UML діаграма взаємодії для серверної частини
