МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ  УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


Кафедра «Програмної інженерії»

ЗВІТ
з практичного заняття №1
з дисципліни «Аналіз та рефакторинг коду»
на тему: «Правила оформлення програмного коду»







Виконала	                      Перевірив
ст. гр. ПЗПІ-22-6	              ст. викладач
Лисенко А.М.			      Сокорчук І.П.









Харків 2024
1 Правила оформлення програмного коду на прикладі мови програмування JavaScript
2. Мета роботи:
Ознайомитись з основними рекомендаціями щодо написання чистого, ефективного та підтримуваного коду для різних мов програмування, а також навчитися аналізувати та рефакторити код для покращення його якості.
3. Хід роботи:
3.1. Для виконання першого практичного заняття та проведення аналізу було обрано мову програмування JavaScript.
3.2. Проведено ознайомлення з основними рекомендаціями для написання якісного та чистого коду у цій мові.
3.3. Підготовано приклади коду, які демонструють, як потрібно застосовувати наведені рекомендації. 
3.4. Створено презентацію, що містить аналіз обраної мови програмування. Інформація та кодові рекомендації зі слайдів презентації представлено нижче:
Вступ:
JavaScript – мова програмування, що використовується для створення динамічних веб-сторінок, розробки серверних додатків, мобільних застосунків та роботи з апаратним забезпеченням.
В умовах швидкого розвитку технологій і збільшення складності програмних проєктів правила оформлення коду стають надзвичайно важливими. Правильно організований код дозволяє розробникам легше розуміти чужий код та підтримувати його, він сприяє зменшенню кількості помилок та спрощенню їх пошуку, забезпечує єдиний стиль у проєктах.
Дотримання стандартів оформлення у JavaScript особливо важливе через динамічну природу мови, яка може спричиняти помилки у випадку недбалого кодування. 
Організація проєкту та файлів:
Модульна архітектура широко використовується в сучасній веброзробці, особливо у побудові серверних додатків за допомогою JavaScript. Її основна ідея полягає у розділенні відповідальностей для кращої організації коду, що спрощує його підтримку та розвиток:
	• controllers/ – логіка обробки запитів.
	• services/ – бізнес-логіка.
	• models/ – моделі даних.
	• routes/ – маршрутизація. 
Відступи та вирівнювання:
Існує два типи відступів при написанні коду на JavaScript.
Перший тип це горизонтальні відступи. Вони робляться за допомогою двох або чотирьох пробілів, або за допомогою табуляції (клавіша Tab). Однією з переваг пробілів є те, що пробіли дозволяють більш гнучку конфігурацію відступів, ніж табуляція.
Другий тип Д вертикальні відступи. Це пусті рядки для розподілу коду на «логічні блоки».
Фігурні дужки:
У більшості JavaScript проєктів варто використовувати фігурні дужки написані у стилі K&R, де дужка що відкриває блок знаходиться не на новому рядку, а на тому ж, що й відповідне ключове слово. Також потрібно додавати перед нею пробіл. 
Приклад використання відступів, вирівнювання, фігурних дужок:
     1	// Гарний приклад використання відступів та вирівнювання 
     2	function validateDimensions(width, height) {
     3	  return width > 0 && height > 0;
     4	}
     5
     6	function calculatePerimeter(width, height) {
     7	  return 2 * (width + height);
     8	}
     9
     10	// Поганий приклад використання відступів, відсунтніть вирівнювання
     11	function calculateArea(width, height){
     12	  return width*height;
     13	  }function calculatePerimeter(width,height){return 2*(width+height);}
Довжина рядка:
Максимальна довжина рядка зазвичай не повинна перевищувати 80-120  символів.
     1	// Відсутнє дотримання правила довжини (80–120 символів). 
     2	console.assert(calculateArea(5, 10) === 50, "Area function test failed. Make changes to the code logic.");
     3
     4	// Розбиття рядка для покращення читабельності.
     5	console.assert(calculateArea(5, 10) === 50,
     6	 "Area function test failed. Make changes to the code logic.");
Оголошення та іменування змінних:
Для створення змінної треба використати ключове слово let. Оголошувати змінну можна лише один раз. Повторне оголошення тієї ж змінної призведе до синтаксичної помилки.
В JavaScript є два обмеження, які стосуються імен змінних:
	• Ім’я має містити лише букви, цифри або символи $ та _.
	• Перший символ не має бути числом.
Для написання імені, яке містить декілька слів, зазвичай використовують «верблюжий регістр» (camelCase). Тобто слова йдуть одне за одним, перше слово пишеться з маленької букви, а кожне наступне Т з великої букви й без пробілів.
Приклади оголошення та іменування змінних:
     1	// Іменування змінних (гарний приклад)
     2	let rectangleWidth = 5;
     3	let rectangleHeight = 10;
     4
     5	// Іменування змінних (поганий приклад)
     6	let rW = 5;
     7	let rH = 10;
Оголошення та іменування констант:
Щоб оголосити константу (незмінювану) змінну треба використати ключове слово const.
Константи можна використовувати як псевдоніми для значень, які важко запам’ятати і які відомі до початку виконання скрипту. Такі константи пишуться в верхньому регістрі з використанням підкреслень.
Приклади оголошення та іменування констант:
     1	// Оголошення та іменування констант (гарний приклад)
     2	const RECTANGLE_NAME = "Rectangle";
     3	const PI = 3.14;
     4
     5	// Іменування константи (поганий приклад)
     6	const pi = 3.14;
Оголошення та іменування функцій:
Функція оголошується за допомогою ключового слова function.
Ім'я функції має чітко відображати її призначення, тобто дію (одна функція – одна дія), яку вона виконує. Тому в їхніх іменах варто використовувати дієслова. Загалом імена функцій повинні бути стислими та описовими.
Для назв функцій краще використовувати стиль camelCase. Також варто уникати невідомих скорочень, якщо це не стандартні терміни. 
Приклади оголошення та іменування функцій:
     1	// Оголошення та іменування функції (гарний приклад)
     2	function calculateArea(width, height) {
     3	  return width * height;
     4	}
     5
     6	// Іменування функції (поганий приклад)
     7	function cA(w, h) {
     8	  return w * h;
     9	}
Оголошення та іменування класів:
Класи створюються за допомогою ключового слова class після якого вказується ім’я класу. Він має виконувати лише одну логічну задачу.
Для назв класів використовується стиль PascalCase, тобто кожне слово в імені починається з великої літери.
Ім'я класу повинно чітко описувати його призначення. Якщо клас відповідає за конкретний об’єкт або сутність, треба використовувати іменник в однині. 
Приклади оголошення та іменування класів:
     1	class Rectangle {
     2	  constructor(width, height) {
     3	    this.width = width;
     4	    this.height = height;
     5	  }
     6 
     7	  calculateArea() {
     8	    return calculateArea(this.width, this.height);
     9	  }
     10
     11	  calculatePerimeter() {
     12	    return calculatePerimeter(this.width, this.height);
     13	  }
     14	}
     15
     16	// Іменування класу (поганий приклад)
     17	class rectangle {
     18	  constructor(width, height) {
     19	  this.width = width;
     20	  this.height = height;
     21	  }
     22	}
Коментарі до коду:
Коментарі дозволяють роз'яснити, що робить той чи інший фрагмент коду. Крім того, вони використовуються для розбиття коду на логічні блоки або секції, що робить код більш зрозумілим і легким для підтримки. Також коментарі можуть тимчасово «виключити» частини коду під час тестування або налагодження, щоб перевірити, як працює програма без певних функцій або змінних.
У JavaScript є два основні способи додавання коментарів.
Однорядкові коментарі починаються з подвійної косої риски //.
Багаторядкові коментарі починаються з косої риски з зірочкою /* і закінчується зірочкою з косою рискою */. 
Вкладені коментарі не підтримуються. Не можна використовувати /*...*/ всередині /*...*/.
Приклади правильного використання коментарів:
     1	//const PI = 3.14;
     2
     3	// Функція обчислення площі прямокутника.
     4	function calculateArea(width, height) {
     5	  return width * height;
     6	}
     7
     8	/*
     9	function calculatePerimeter(width, height) {
     10	  return 2 * (width + height);
     11	}
     12	*/
Cпеціалізовані коментарі для документації:
Для документування коду в JavaScript зазвичай використовуються спеціалізовані коментарі у форматі JSDoc. Це стандарт, який дозволяє створювати структуровані коментарі, що легко інтегруються з інструментами автоматичної генерації документації. Ним можна документувати такі речі, як модулі, простори імен, класи, методи, параметри методів тощо.
Коментарі JSDoc зазвичай слід розміщувати безпосередньо перед кодом, який документується. Кожен коментар має починатися з /** послідовності, щоб його розпізнав аналізатор JSDoc. Коментарі, що починаються з /*, /*** або більше ніж 3 зірочки, ігноруватимуться. 
Приклади написання спеціалізованих коментарів у форматі JSDoc:
     1	/**
     2	 * Validates the dimensions of a rectangle.
     3	 * @param {number} width - The width of the rectangle.
     3	 * @param {number} height - The height of the rectangle.
     4	 * @returns {boolean} - True if dimensions are valid, false otherwise.
     5	 */
     6
     7	/**
     8	   * Calculates the perimeter of the rectangle using instance variables.
     9	   * @returns {number} - The perimeter of the rectangle.
     10	   */
Інструмент для перевірки дотримання стилю:
У JavaScript існує багато інструментів для автоматичної перевірки стилю коду та його відповідності конвенціям.
ESLint є найпопулярнішим інструментом для перевірки та виправлення стилю коду. Він підтримує різноманітні конфігурації та інтеграцію з IDE (Visual Studio Code, WebStorm тощо).
Кодування на основі тестування:
Використання принципу кодування на основі тестування в JavaScript дозволяє забезпечити високу якість коду, легко знаходити і виправляти помилки, а також підтримувати перевірку правильності роботи програми на всіх етапах її розвитку.
Цикл кодування на основі тестування в JavaScript базується на трьох основних етапах, відомих як Червоний-Зелений-Рефакторинг.
Спочатку пишеться тест, який перевіряє певну частину функціональності. Оскільки функціональність ще не реалізована, тест не проходить, і ми отримуємо помилку (червоний стан). Далі пишеться мінімальний код, необхідний для того, щоб тест пройшов. Важливо, щоб код лише вирішував задачу, яка перевіряється тестом, не додаючи зайвої логіки. Після цього тест повинен пройти успішно (зелений стан). Коли тест пройдено, можна почати рефакторинг коду, покращуючи його структуру та ефективність, не змінюючи поведінки. Тести продовжують забезпечувати впевненість у тому, що зміни не порушили роботу коду.
Застосування кодування на основі тестування:
     1	function testRectangle() {
     2	  console.assert(calculateArea(5, 10) === 50,
     3	   "Area function test failed. Make changes to the code logic.");
     4	  console.assert(calculatePerimeter(5, 10) === 30, "Perimeter function test failed");
     5  
     6	  const testRectangle = new Rectangle(5, 10);
     7	  console.assert(testRectangle.calculateArea() === 50, "Rectangle class area test failed");
     8	  console.assert(testRectangle.calculatePerimeter() === 30, "Rectangle class perimeter test failed");
     9  
     10	  console.log("All tests passed.");
     11	}
     12  
     13	let rectangleWidth = 5;
     14	let rectangleHeight = 10;
     15  
     16	if (validateDimensions(rectangleWidth, rectangleHeight)) {
     17	  const myRectangle = new Rectangle(rectangleWidth, rectangleHeight);
     18  
     19	   console.log(`${RECTANGLE_NAME} Area:`, myRectangle.calculateArea());
     20	   console.log(`${RECTANGLE_NAME} Perimeter:`, myRectangle.calculatePerimeter());
     21	} else {
     22	  console.log("Invalid dimensions.");
     23	}
     24  
     25	testRectangle();
Висновки:
Беззаперечно, важливо дотримуватися правил оформлення коду та ключових аспекти в JavaScript, які впливають на якість і зручність роботи з програмним забезпеченням.
Дотримання стандартів оформлення забезпечує читабельність та підтримуваність коду. Правильна організація коду, зокрема використання структурованих коментарів, чіткої іменної конвенції, правильного форматування покращує зрозумілість і знижує ризик помилок. Інструменти автоматизації, наприклад, ESLint, допомагають розробникам економити час, перевіряючи та виправляючи помилки стилю. Крім того, дотримання спільних правил оформлення позитивно впливає на продуктивність командної роботи, створюючи єдине середовище для розробників.
Список використаних джерел:
	• Mozilla Developer Network. Learn JavaScript. https://developer.mozilla.org/en-US/docs/Learn/JavaScript. 
	• The Modern JavaScript Tutorial. https://uk.javascript.info/
	• JSDoc Documentation. https://jsdoc.app/
	• Martin, Robert C. Clean Code: A Handbook of Agile Software Craftsmanship. Prentice Hall, 2008.
4. Висновок: 
Під час виконання практичної роботи було успішно вивчено та застосовано правила написання якісного коду на прикладі мови програмування JavaScript. Були створені кодові приклади для демонстрації основних принципів кодування. Всі ці приклади та загальні принципи зібрано у розробленій презентації. Повні слайди презентації наведено у додатку А.
5. Посилання на відео з виступом (YouTube):
https://youtu.be/K1F5KXm0b20 
6. Посилання на репозиторій з кодом (GitHub):
https://github.com/NureLysenkoAnna/arkpz-pzpi-22-6-lysenko-anna/tree/main/Pract1 

ДОДАТОК А
Слайди презентації

Рисунок А.1 – Слайд з темою виступу  
     
Рисунок А.7 – Слайд «Довжина рядка»

Рисунок А.9 – Слайд «Приклади оголошення та іменування змінних»

Рисунок А.10 – Слайд «Оголошення та іменування констант»

Рисунок А.11 – Слайд «Приклади оголошення та іменування констант»

Рисунок А.12 – Слайд «Оголошення та іменування функцій»

Рисунок А.13 – Слайд «Приклади оголошення та іменування функцій»

Рисунок А.14 – Слайд «Оголошення та іменування класів»

Рисунок А.15 – Слайд «Приклади оголошення та іменування класів»

Рисунок А.16 – Слайд «Коментарі до коду»

Рисунок А.17 – Слайд «Приклади правильного використання коментарів»

Рисунок А.18 – Слайд «Спеціалізовані коментарі для документації»

Рисунок А.19 – Слайд «Приклади написання спеціалізованих коментарів у форматі JSDoc»

Рисунок А.20 – Слайд «Інструмент для перевірки дотримання стилю»

Рисунок А.21 – Слайд «Кодування на основі тестування»

Рисунок А.22 – Слайд «Застосування кодування на основі тестування»

Рисунок А.23 – Слайд «Висновки»

Рисунок А.24 – Слайд «Список використаних джерел»
